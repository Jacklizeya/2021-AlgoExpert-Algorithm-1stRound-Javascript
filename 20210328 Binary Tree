// Do not edit the class below except for
// the insert, contains, and remove methods.
// Feel free to add new properties and methods
// to the class.
class BST {
    constructor(value) {
      this.value = value;
      this.left = null;
      this.right = null;
    }
  
    insert(value) {
      // Write your code here.
      let newNode = new BST(value)  
      if (value < this.value) {
          if (this.left === null) {this.left = newNode} else {this.left.insert(value)}
      }
      if (value >= this.value) {
          if (this.right === null) {this.right = newNode} else {this.right.insert(value)}
      }
        // Do not edit the return statement of this method.
      return this;
    }
  
    contains(value) {
      // Write your code here.
      if (value === this.value) {return (true)}
      else if  (value < this.value) {
          if (this.left === null) {return false}
          else {return this.left.contains(value)}
      }  else {
        if (this.right === null) {return false}
        else {return this.right.contains(value)}
      }
    }
  
    remove(value, parentNode = null) {
      // Write your code here.
      // Do not edit the return statement of this method.
        
      if (value < this.value) { if (this.left !== null) {this.left.remove(value, this)}}
      else if (value > this.value) {if (this.right !== null) {this.right.remove(value, this)}}

      else if (value === this.value) { 
            if (this.left !== null && this.right !== null) {this.value=this.right.getMinValue(); this.right.remove(this.value, this)}
            else if (parentNode === null) {
                    if (this.left !==null) {this.value = this.left.value; this.right = this.left.right; this.left = this.left.left}
                    else if (this.right !==null) {this.value = this.right.value; this.left = this.right.left; this.right=this.right.right}
                    else {}
            }
            else if (parentNode.left === this) {parentNode.left = this.left === null? this.right: this.left}
            else if (parentNode.right === this) {parentNode.right = this.left ===null? this.right :this.lef}
      }

      return this
    }

    getMinValue() {
        if (this.left === null) {return this.value} else {return this.left.getMinValue()}
    }


    
  }
  
  // Do not edit the line below.
  exports.BST = BST;
  
  
  
  // Iterative Solution
  
  remove (value, parentNode=null) {
    let currentNode = this;
    while (currentNode!== null) {
        if (value < currentNode.value) {parentNode = currentNode; currentNode = currentNode.left}
        else if (value > currentNode.value) {parentNode = currentNode; currentNode = currentNode.right}
        else {
            if (currentNode.left !== null && currentNode.right !== null) {
                currentNode.value = currentNode.right.getMinValue(); currentNode.right.remove(currentNode.value, currentNode)}
            else if (parentNode = null) {
                if (this.left !== null) {currentNode.left = this.left.left; currentNode.right=this.left.right; currentNode.value = this.left.value}
                if (this.right !== null) {currentNode.left = this.right.left; currentNode.right = this.right.right; currentNode.value = this.right.value}
                else {}
            }
            else if (currentNode = parentNode.left) {parentNode.left = (currentNode.left === null? currentNode.right: currentNode.left)}
            else if (currentNode = parentNode.right) {parentNode.right = (currentNode.right === null? currentNode.left: currentNode.right)}
            break;
        }
    }
    return this
}

getminValue() {
    let currentNode = this
    while (currentNode.left !== null) {
        currentNode = this.left
    }
    return currentNode.value
}
