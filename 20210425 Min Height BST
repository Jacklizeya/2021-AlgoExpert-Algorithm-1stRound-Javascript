function minHeightBst(array, tree = new BST(null)) {
    // Write your code here.

    // base part ********** this could be the first round ******************************** if not insert and return
    if (array.length === 1) { if (tree.value === null) 
    {tree.value = array[0]; return tree} else {tree.insert(array[0]); return} } 

    if (array.length === 2) { if (tree.value === null) 
    {tree.value = array[0]; tree.insert(array[1]); return tree} else {tree.insert(array[0]); tree.insert(array[1]); return} } 
    //recursive part for 3 and 3 more 
    let middleIndex = Math.floor(array.length/2)
    if (tree.value === null) {tree.value = array[middleIndex]} else {tree.insert(array[middleIndex])}
    leftSide = array.slice(0, middleIndex); minHeightBst(leftSide, tree)
    rightSide = array.slice(middleIndex + 1 , array.length); minHeightBst(rightSide, tree)
    // finalized result
    return tree
  }

class BST {
  constructor(value) {
    this.value = value;
    this.left = null;
    this.right = null;
  }

  insert(value) {
    if (value < this.value) {
      if (this.left === null) {
        this.left = new BST(value);
      } else {
        this.left.insert(value);
      }
    } else {
      if (this.right === null) {
        this.right = new BST(value);
      } else {
        this.right.insert(value);
      }
    }
  }
}

// Do not edit the line below.
exports.minHeightBst = minHeightBst;
